import argparse
import glob
import json
import pickle
import os
from utils import logger, get_first_valid_github_commit_link, remove_redundance_info, extract_commit_code_change


def load_cve_json_files(path):
    # Construct the pattern for matching files
    pattern = f"{path}/*/*/*.json"
    logger(pattern)

    # Use glob to find all files matching the pattern
    file_paths = glob.glob(pattern)

    # Initialize an empty list to store loaded JSON data
    cve_data = []

    # Loop through each file and load JSON content
    for file_path in file_paths:
        with open(file_path, 'r', encoding='utf-8') as file:
            json_content = json.load(file)
            
            if json_content['cveMetadata']['state'] == 'PUBLISHED' and get_first_valid_github_commit_link(json_content['containers']['cna']['references']):
                cve_data.append(json_content)

    return cve_data

def read_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-path', type=str, help='Path to the directory containing CVE JSON files.')

    return parser.parse_args()

def main():
    args = read_args()

    # Check if the pickle file exists
    if os.path.exists('filter-published-github-commit.pkl'):
        with open('filter-published-github-commit.pkl', 'rb') as file:
            cve_json_data = pickle.load(file)
    else:
        # Call the function to load CVE JSON files
        cve_json_data = load_cve_json_files(args.path)

        # Save the data to a pickle file
        with open('filter-published-github-commit.pkl', 'wb') as file:
            pickle.dump(cve_json_data, file)

    # Now cve_json_data contains a list of dictionaries, each representing the content of a JSON file
    # You can process or analyze the data as needed
    logger(len(cve_json_data))
    print(f"Loaded {len(cve_json_data)} CVE JSON files from {args.path}.")

    if os.path.exists('remove-redundance-information.pkl'):
        with open('remove-redundance-information.pkl', 'rb') as file:
            remove_redundance_information = pickle.load(file)
    else:
        # Call the function to load CVE JSON files
        remove_redundance_information = remove_redundance_info(cve_json_data)

        # Save the data to a pickle file
        with open('remove-redundance-information.pkl', 'wb') as file:
            pickle.dump(remove_redundance_information, file)

    print(f"Remove redundance information... {len(remove_redundance_information)}")

    if os.path.exists('get-commit-code-change.pkl'):
        with open('get-commit-code-change.pkl', 'rb') as file:
            get_commit_code_change = pickle.load(file)
    else:
        # Call the function to load CVE JSON files
        get_commit_code_change = extract_commit_code_change(remove_redundance_information)

        # Save the data to a pickle file
        with open('get-commit-code-change.pkl', 'wb') as file:
            pickle.dump(get_commit_code_change, file)

    print(f"Get commit code change... {len(get_commit_code_change)}")

if __name__ == "__main__":
    main()
